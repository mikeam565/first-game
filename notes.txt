## Small deliverables
- Rounded normal for grass
## Medium/Longer term
* Performance Optimization
    - Recently implemented: Dynamic terrain resolution (I want extreme view-distances for this game)
    - Still need:
        * Dynamic grass. This is critical for what I was going for in this project
            -> (2/27) Implemented view + distance based logic for updating grass. This lends to a model with more smaller patches of grass instead of 9 big ones.
                -> Generating and despawning entities based off proximity to player should be generalized into a trait and used for anything procedural. Like my first go at dynamic terrain

## Notes
* Queries
    - Queries cannot conflict -> Had the Camera controller query Transforms, as well as the Player controller, and it was not happy. Had to put camera logic in player logic.
        * UPDATE: Use Without filters. Bevy uses these to determine if there is possible overlap in queries.
* 2/21 Player deformation of grass
    - tried out deforming grass through player object emitting entities with GrassDeformation components and doing calculations to see if a grass vertex exists close to the GrassDeformation entity, to deform it.
    - Insights:
        * Spawning these entities constantly whenever moving is (expectedly) terrible for performance. A better approach would be to spawn only as points for a path
        * timer similar to projectile timer can be used to slowly un-deform the grass back to normal condition
* Use Bevy's ecs Added filter for one-time modifications